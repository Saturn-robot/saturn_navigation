max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)

# robot_radius: 0.20  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular
footprint: [[0.0565, 0.072], [0.0565, -0.072], [-0.0565, -0.072], [-0.0565, 0.072]]

map_type: voxel

obstacle_layer:
  enabled:              true # 允许使用障碍物层
  max_obstacle_height:  0.6 # 传感器有效读取的障碍物最大高度的全局过滤参数，对于所有传感器都起作用
  origin_z:             0.0 # 地图上z方向上的原点，单位为米
  z_resolution:         0.2 # 地图在z方向上的分辨率，单位为米/单元格
  z_voxels:             2   # 地图在垂直列上（z方向上）存在的体素个数，网格的高度为：z_resolution*z_voxels
  unknown_threshold:    15  # 在“已知”垂直列上（z方向）允许的最大未知单元格个数
  mark_threshold:       0   # 在空闲垂直列上允许的最大已标记单元格个数
  combination_method:   1
  track_unknown_space:  true    # 允许追踪未知区域，此时需要禁止全局规划器将这些区域作为规划区域
  obstacle_range: 2.5 # 在这个值范围内的障碍物都会被记录到代价地图中
  raytrace_range: 3.0 # 在地图上的这个范围内的障碍物会被传感器记录下来
  publish_voxel_map: false # 禁止发布体素网格数据用于可视化
  observation_sources:  scan bump # 观测源命名空间，在每个命名空间下可以设置若干参数
  scan:
    data_type: LaserScan
    topic: scan # 传感器数据源的话题
    marking: true # 是否将获取的传感器数据用于标记代价地图
    clearing: true # 是否将获取的传感器数据用于清除代价地图
    min_obstacle_height: 0.25 # 传感器有效读取的障碍物最小高度
    max_obstacle_height: 0.35 # 传感器有效读取的障碍物最大高度，一般设为比机器人高度略高
  bump:
    data_type: PointCloud2
    topic: mobile_base/sensors/bumper_pointcloud
    marking: true
    clearing: false
    min_obstacle_height: 0.0
    max_obstacle_height: 0.15
  # for debugging only, let's you see the entire voxel grid

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true # 允许使用膨胀层
  cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.3  # 规划器在规划的路径离障碍物的距离代价；或者说障碍物的膨胀半径，规划器会在规划路径的时候视这些膨胀出来的部分为障碍物

static_layer:
  enabled:              true # 允许使用静态层（也就是用户预先生成的静态地图）
